// // SPDX-License-Identifier: GPL-3.0
// pragma solidity >=0.8.4;

// import "truffle/Assert.sol";
// import "truffle/DeployedAddresses.sol";
// import "../contracts/ThunderHold.sol";

// contract ThunderHoldTest {

//     ThunderHold thunderHold;

//     /// 'beforeAll' runs before all other tests
//     /// More special functions are: 'beforeEach', 'beforeAll', 'afterEach' & 'afterAll'
//     function beforeAll() public {
//         thunderHold = new ThunderHold(
//             "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",
//             1626488374);
//     }

//     function checkSuccess() public {
//         // Use 'Assert' methods: https://remix-ide.readthedocs.io/en/latest/assert_library.html
//         Assert.ok(2 == 2, 'should be true');
//         Assert.greaterThan(uint(2), uint(1), "2 should be greater than to 1");
//         Assert.lesserThan(uint(2), uint(3), "2 should be lesser than to 3");
//     }

//     function checkSuccess2() public pure returns (bool) {
//         // Use the return value (true or false) to test the contract
//         return true;
//     }
    
//     function checkFailure() public {
//         Assert.notEqual(uint(1), uint(2), "1 should not be equal to 2");
//     }

//     /// Custom Transaction Context: https://remix-ide.readthedocs.io/en/latest/unittesting.html#customization
//     /// #sender: account-1
//     /// #value: 100
//     function checkSenderAndValue() public payable {
//         // account index varies 0-9, value is in wei
//         Assert.equal(msg.sender, TestsAccounts.getAccount(1), "Invalid sender");
//         Assert.equal(msg.value, 100, "Invalid value");
//     }
// }