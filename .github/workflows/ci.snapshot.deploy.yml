name: Entorno CI 'snapshot' vesions

on:
  push:
    # publish image as master=snapshot or on new tag
    # except on document and ci changes
    branches:
      - master
    tags:
      - "*"
    paths-ignore:
      - "**.md"
      - ".github/workflows/*yml"

env:
  # TODO: remember to update version on new tag
  # Si se quiere generar una release
  # LATEST_TAG default snapshot
  LATEST_TAG: v1.0.5
  DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    needs: coverage

    runs-on: [self-hosted, node]

    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo $DOCKER_HUB_TOKEN | docker login -u $DOCKER_HUB_USER --password-stdin

      - name: Build docker images and publish to Dockehub
        run: |
          export VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && export VERSION=$VERSION
          [ "$VERSION" == "master" ] && export VERSION=snapshot

          echo VERSION=$VERSION
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose -f docker-compose.yml build web
          docker-compose -f docker-compose.yml push web

          # tag and push versions X.X and latest
          if echo "$VERSION" | grep -qE '^\w+\.\w+\.\w+$' && [ "$LATEST_TAG" == "$VERSION" ]; then
              export VERSION="latest"
              echo VERSION=$VERSION
              COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose -f docker-compose.yml build web
              docker-compose -f docker-compose.yml push web
          fi

  coverage:
    needs: test

    runs-on: [self-hosted, node]

    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repo code for testing
        uses: actions/checkout@v2

      - name: clean cache
        run: npm cache clean --force

      - name: Instalamos las deps
        run: |
          yarn install

      - name: Evaluamos coverage
        run: |
          yarn run coverage

  test:
    runs-on: [self-hosted, node]

    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repo code for testing
        uses: actions/checkout@v2

      - name: Logging into dockerhub
        run: echo $DOCKER_HUB_TOKEN | docker login -u $DOCKER_HUB_USER --password-stdin

      - name: Buildeamos todos las imagenes requeridas
        run: |
          echo 'build'
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose --file docker-compose-test.yml build

      - name: Levantamos el entorno de test
        run: |
          echo 'tests'
          docker-compose --file docker-compose-test.yml up --remove-orphans --exit-code-from tests

      - name: Bajamos el entorno de test
        run: |
          echo 'down'
          docker-compose --file docker-compose-test.yml down

  deploy:
    needs: build

    runs-on: [self-hosted, node]

    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: clean cache
        run: npm cache clean --force

      - name: install packages
        run: yarn install

      - name: Build web
        run: CI='' npm run build --prod --verbose

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
