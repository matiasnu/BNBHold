# NOTAS
# Solo se publica una nueva imagen si el pipeline se ejecuto satisfactoriamente, en caso de error no 
# Para generar una imagen tagueada de docker es necesario que exista un tag con el mismo nombre de version en el repo, para esto se usa LATEST_TAG y se compara con la ref del repo
# Procedimiento para una release con Version Tags o snapshot

# 1) Se agrega el tag que se quiere crear en la variable de entorno LATEST_TAG del archivo ci.yml. por ejemplo
# LATEST_TAG: v1.0.0

# 2) Se agrega el tag que se quiere crear en jobs.schedule-push.strategy.matrix.ref del archivo ci.yml, por ejemplo
# ref: [ v1.0.0]

# 3) Se comitea en el repo local, sea cual sea el branch
# git commit -a -m "release"

# 4) En el caso de requerir un merge contra master se hace el merge
# 6) Se pushean los cambios (este push ejecuta el pipeline), lo cual generara la release o snapshot
# git push

# 4) En el caso de estar parado en un repo que no es master
# git checkout master
# git pull
# git tag -a v1.0.0 -m "release..."
# git push --tags

# 5) En el caso de estar parado en master
# git tag -a v1.0.0 -m "release..."
# git push --tags
# Anlternativamente  se puede usar
# git push origin v1.0.0


# Si por alguna razon se genero mal la release, se debe eliminar el TAG y generar de nuevo la release
# Para eliminar un Tag remoto, se debe ejecutar
# git push --delete origin v1.0.0
# Y luego para eliminar el TAG local, ejecutar por ejemplo
# git tag -d v1.0.0
# Debe existir una numeracion completa de TAGS v1.0.0 / v1.0.3 / v1.0.3 / etc.

# La imagen de docker principal es la web y esa es la que vamos a publicar
# Si es un snapshot -- por defecto-- le ponemos snapshot como tag, para que sobreescriba a las snapshots anteriores
# Si es una version le ponemos el tag de la vesion que definio el developer, respetando la secuencia y la semantica

name: Entorno CI dockerizado pipeline

on:
# Solo master tiene CI/CD
# always run tests on merge except on document and ci changes
  push:
    branches: [ omitir ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/*yml'    

env:
  # TODO: remember to update version on new tag
  # Si se quiere generar una release
  # LATEST_TAG default snapshot
  LATEST_TAG: v1.0.0
  DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_HUB_PASS: ${{ secrets.DOCKER_HUB_PASS }}

jobs:

  build:

    runs-on: [self-hosted, linux]

    strategy:
      matrix:
        # TODO: remember to add new tags to schedule
        # La referencia al tag debe existir, ya que se tiene que generar una imagen de docker con la version del codigo fuente asociado
        ref: 
          - master 
          - v1.0.0 
        # Por ahora no la usamos, pero es util para testear en distintas versiones de node nuestra ui
        # nodeversion: [ v16.3.0 ]

    steps:

    - name: Output Run ID
      run: echo ${{ github.run_id }}

    - name: Output Run Number
      run: echo ${{ github.run_number }}

    - name: Checkout repo code
      uses: actions/checkout@v2
#        with:
#        ref: ${{ matrix.ref }}

    - name: Printing some git values 
      run: |
        echo "About repo ${{ github.event.inputs.name }}!"
        echo "- in ${{ github.event.inputs.home }}!"

    - name: Logging into github
      run: echo $DOCKER_HUB_PASS | docker login docker.io -u $DOCKER_HUB_USER --password-stdin

    - name: Deploying dockerized environment
      run: |
        echo 'Ejecutando entorno dockerizado'
        export VERSION=${{ matrix.ref }}
        [ "$VERSION" == "master" ] && export VERSION=snapshot
        echo VERSION=$VERSION

        docker-compose -f docker-compose.yml up --build -d --remove-orphans
        
    - name: Testing over environment        
      run: |
        echo 'Generando Tests sobre el entorno'

#    - name: Test using docker run
#      run: |
#        docker run --network container:webapp-frontend appropriate/curl -s --retry 10 --retry-connrefused http://localhost:5000/        

    - name: Stoping environment
      run: |
        echo 'Deteniendo/eliminando el entorno'
        docker-compose -f docker-compose.yml down

    - name: Publishing docker images snapshot tag
      run: |
        echo 'Generando imagenes de docker snapshot si aplica'
        export VERSION=${{ matrix.ref }}
        echo $VERSION

        if  [ "$VERSION"  == "master" ] || [ "$LATEST_TAG" == "snapshot" ]; then
          export VERSION=snapshot
          echo VERSION=$VERSION
          docker-compose -f docker-compose.yml build web
          docker-compose -f docker-compose.yml push web
        fi

    - name: Publishing docker images for version tags
      run: |
        echo 'Generando imagenes de docker correspondientes a releases'
        export VERSION=${{ matrix.ref }}
        echo $VERSION

        if echo "$VERSION" | grep -qE '^\w+\.\w+\.\w+$' && [ "$LATEST_TAG" == "$VERSION" ]; then
          for VERSION in latest $(echo $VERSION); do
            export VERSION
            echo VERSION=$VERSION
            docker-compose -f docker-compose.yml build web
            docker-compose -f docker-compose.yml push web
          done
        fi
