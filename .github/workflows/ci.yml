# NOTAS
# Solo se publica una nueva imagen si el pipeline se ejecuto satisfactoriamente, en caso de error no 
# Para generar una imagen tagueada de docker es necesario que exista un tag con el mismo nombre de version en el repo, para esto se usa LATEST_TAG y se compara con la ref del repo
# Procedimiento
# 1) Se agrega el tag de la version en el repo, por ejemplo
# git tag -a v1.0.3
# 2) Se pushean los tags a origin, por ejemplo
# git push origin --tags
# 3) Se agrega el tag en LATEST_TAG. por ejemplo
# LATEST_TAG: v1.0.3
# 4) Se agrega el tag en ref, por ejemplo
# ref: [ v1.0.3]
# 5) Se comitean los archivos, por ejemplo
# git commit -a -m "fix syntax error"
# 6) Se pushean los cambios, lo cual generara la release o snapshot
# git push
# Si por alguna razon se genero mal la release, se debe eliminar el TAG y generar de nuevo la release
# Para eliminar un Tag remoto, se debe ejecutar
# git push --delete origin TAGNAME
# Y luego para eliminar el TAG local, ejecutar por ejemplo
# git tag -d v1.0.3
# Debe existir una numeracion completa de TAGS v1.0.0 / v1.0.3 / v1.0.3 / etc.

# La imagen de docker principal es la web y esa es la que vamos a publicar
# Si es un snapshot -- por defecto-- le ponemos snapshot como tag, para que sobreescriba a las snapshots anteriores
# Si es una version le ponemos el tag de la vesion que definio el developer, respetando la secuencia y la semantica

name: Entorno CI dockerizado pipeline

on:
# Solo master tiene CI/CD
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
#  workflow-dispatch: # Allow manual execution  

env:
  # TODO: remember to update version on new tag
  # Si se quiere generar una release
  # LATEST_TAG default snapshot
  LATEST_TAG: v1.0.1
  DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_HUB_PASS: ${{ secrets.DOCKER_HUB_PASS }}

jobs:

  build:

    runs-on: [self-hosted, linux]

    strategy:
      matrix:
        # TODO: remember to add new tags to schedule
        # La referencia al tag debe existir
        ref: [ v1.0.1]
        # Por ahora no la usamos, pero es util para testear en distintas versiones de node nuestra ui
        # nodeversion: [ v16.3.0 ]

    steps:
    
    - name: Output Run ID
      run: echo ${{ github.run_id }}

    - name: Output Run Number
      run: echo ${{ github.run_number }}

    - name: Checkout repo code
      uses: actions/checkout@v2
      with:
        ref: ${{ matrix.ref }}

    - name: Printing some git values 
      run: |
        echo "About repo ${{ github.event.inputs.name }}!"
        echo "- in ${{ github.event.inputs.home }}!"

    - name: Logging into github
      run: echo $DOCKER_HUB_PASS | docker login docker.io -u $DOCKER_HUB_USER --password-stdin

    - name: Deploying dockerized environment
      run: |
        echo 'Ejecutando entorno dockerizado'
        export VERSION=${{ matrix.ref }}
        [ "$VERSION" == "master" ] && export VERSION=snapshot
        echo VERSION=$VERSION

        docker-compose -f docker-compose.yml up --build -d --remove-orphans
        
    - name: Testing over environment        
      run: |
        echo 'Generando Tests sobre el entorno'

    - name: Stoping environment
      run: |
        echo 'Deteniendo/eliminando el entorno'
        docker-compose -f docker-compose.yml down

    - name: Publishing docker images snapshot
      run: |
        echo 'Generando imagenes de docker snapshot si aplica'
        export VERSION=${{ matrix.ref }}
        if [ "$VERSION" == "master" ] ||  [ "$LATEST_TAG" == "snapshot" ]; then
          export VERSION=snapshot
          echo VERSION=$VERSION
          docker-compose -f docker-compose.yml build web
          docker-compose -f docker-compose.yml push web
          done
        fi

    - name: Publishing docker images version
      run: |
        echo 'Generando imagenes de docker sdnapshot si aplica'
        export VERSION=${{ matrix.ref }}

        if echo "$VERSION" | grep -qE '^\w+\.\w+\.\w+$' && [ "$LATEST_TAG" == "$VERSION" ]; then
          for VERSION in latest; do
            export VERSION
            echo VERSION=$VERSION
          docker-compose -f docker-compose.yml build web
          docker-compose -f docker-compose.yml push web
          done
        fi


#    - name: Use Node.js ${{ matrix.node-version}}
#      uses: actions/setup-node@v2
#      with:
#        node-version: ${{ matrix.node-version}}



#    Esta seccion de codigo es para buildear y pushear una imagen a dockerhub,pero no 
#    para trabajar con docker-compose        
#    - uses: mr-smithers-excellent/docker-build-push@v5
#      name: Build & push Docker image
#      with:
#        image: marianodim/cryptohold
#        tags: v1, latest
#        registry: registry-url.io
#        dockerfile: Dockerfile.ci
#        username: ${{ secrets.DOCKER_USERNAME }}
#        password: ${{ secrets.DOCKER_PASSWORD }}        

#     Estos comandos deben ejecutarse dentro del container
#    - name: Install Packages    
#      run: yarn install --save-dev --loglevel verbose 
    # CI=false es para que no cancele el building si encuentra un warning
#    - name: Build page
#      run: CI=false yarn run build --loglevel verbose

# Comento esta seccion de gh-pages porque no funciona el despliegue, hay un problema cuando se define
# el atributo homepage en el package.json, da un error de formato

#    - name: Deploy to gh-pages
#      uses: peaceiris/actions-gh-pages@v3
#      with:
#        github_token: ${{ secrets.GITHUB_TOKEN }}
#        publish_dir: ./build


# Interesamte para generar una version automaticamente
#      - run: |
#         date > generated.txt
#         git config user.name github-actions
#         git config user.email github-actions@github.com
#         git add .
#         git commit -m "generated"
#         git push