name: Entorno CI 'snapshot' vesions

on:
  push:
    # publish image as master=snapshot or on new tag
    # except on document and ci changes
    branches:
      - master
    tags:
      - '*'
#    paths-ignore:
#      - '**.md'
#      - '.github/workflows/*yml'

env:
  # TODO: remember to update version on new tag
  # Si se quiere generar una release
  # LATEST_TAG default snapshot
  LATEST_TAG: v1.0.2
  DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_HUB_PASS: ${{ secrets.DOCKER_HUB_PASS }}

jobs:

  coverage:
    needs: test

    runs-on: [self-hosted, linux]

    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repo code for testing
        uses: actions/checkout@v2

      - name: Buildeamos la imagen para coverage
        run: |
          docker-compose --file docker-compose-coverage.yml build web-coverage

      - name: Ejecutamos docker con coverage
        run: |
          docker run -i bnbhold_web-coverage:latest truffle run coverage


  test:
    
    runs-on: [self-hosted, linux]
    
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout repo code for testing
        uses: actions/checkout@v2

      - name: Downing pre up docker compose artifact
        run: |
          docker-compose --file docker-compose-test.yml down

      - name: Buildeamos todos las imagenes requeridas
        run: |
          docker-compose --file docker-compose-test.yml build

      - name: Levantamos el entorno de test
        run: |
          docker-compose --file docker-compose-test.yml up --remove-orphans --exit-code-from tests

      - name: Bajamos el entorno de test
        run: |
          docker-compose --file docker-compose-test.yml down

  
  build:
    needs: coverage

    runs-on: [self-hosted, linux]

    if: github.event_name == 'push'
    steps:

      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: Logging into github
        run: echo $DOCKER_HUB_PASS | docker login docker.io -u $DOCKER_HUB_USER --password-stdin
      
      - name: Build docker images and publish to Dockehub
        run: |
          export VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && export VERSION=$VERSION
          [ "$VERSION" == "master" ] && export VERSION=snapshot

          echo VERSION=$VERSION
          docker-compose -f docker-compose.yml build web
          docker-compose -f docker-compose.yml push web

          # tag and push versions X.X and latest
          if echo "$VERSION" | grep -qE '^\w+\.\w+\.\w+$' && [ "$LATEST_TAG" == "$VERSION" ]; then
              export VERSION="latest"
              echo VERSION=$VERSION
              docker-compose -f docker-compose.yml build web
              docker-compose -f docker-compose.yml push web
          fi

  deploy:
    needs: build
    runs-on: [self-hosted, linux]
    if: github.event_name != 'schedule'
    steps:
      - name: Clean environment
        run: npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: Run npm build
        run: npm run build

      - name: Deploy web page to gh-pages
        run: npm run deploy-pages
