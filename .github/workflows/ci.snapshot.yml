# NOTAS
# Solo se publica una nueva imagen si el pipeline se ejecuto satisfactoriamente, en caso de error no
# Para generar una imagen tagueada de docker es necesario que exista un tag con el mismo nombre de version en el repo, para esto se usa LATEST_TAG y se compara con la ref del repo
# Procedimiento para una release con Version Tags o snapshot

# 1) Se agrega el tag que se quiere crear en la variable de entorno LATEST_TAG del archivo ci.yml. por ejemplo
# LATEST_TAG: v1.0.0

# 2) Se agrega el tag que se quiere crear en jobs.schedule-push.strategy.matrix.ref del archivo ci.yml, por ejemplo
# ref: [ v1.0.0]

# 3) Se comitea en el repo local, sea cual sea el branch
# git commit -a -m "release"

# 4) En el caso de requerir un merge contra master se hace el merge
# 6) Se pushean los cambios (este push ejecuta el pipeline), lo cual generara la release o snapshot
# git push

# 4) En el caso de estar parado en un repo que no es master
# git checkout master
# git pull
# git tag -a v1.0.0 -m "release..."
# git push --tags

# 5) En el caso de estar parado en master
# git tag -a v1.0.0 -m "release..."
# git push --tags
# Anlternativamente  se puede usar
# git push origin v1.0.0

# Si por alguna razon se genero mal la release, se debe eliminar el TAG y generar de nuevo la release
# Para eliminar un Tag remoto, se debe ejecutar
# git push --delete origin v1.0.0
# Y luego para eliminar el TAG local, ejecutar por ejemplo
# git tag -d v1.0.0
# Debe existir una numeracion completa de TAGS v1.0.0 / v1.0.3 / v1.0.3 / etc.

# La imagen de docker principal es la web y esa es la que vamos a publicar
# Si es un snapshot -- por defecto-- le ponemos snapshot como tag, para que sobreescriba a las snapshots anteriores
# Si es una version le ponemos el tag de la vesion que definio el developer, respetando la secuencia y la semantica

name: Entorno CI 'snapshot' vesions

on:
  push:
    # publish image as master=snapshot or on new tag
    # except on document and ci changes
    branches:
      - master
    tags:
      - '*'
#    paths-ignore:
#      - '**.md'
#      - '.github/workflows/*yml'

env:
  # TODO: remember to update version on new tag
  # Si se quiere generar una release
  # LATEST_TAG default snapshot
  LATEST_TAG: v1.0.0
  DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_HUB_PASS: ${{ secrets.DOCKER_HUB_PASS }}

jobs:

  test:
    runs-on: [self-hosted, linux]
    if: github.event_name != 'schedule'
    steps:
      - uses: actions/checkout@v2
      - run: |
          docker-compose --file docker-compose-test.yml build web
          #docker-compose --file docker-compose-test.yml run 
  
  build:
    needs: test

    runs-on: [self-hosted, linux]

    if: github.event_name == 'push'
    steps:

      - name: Checkout repo code
        uses: actions/checkout@v2

      - name: Logging into github
        run: echo $DOCKER_HUB_PASS | docker login docker.io -u $DOCKER_HUB_USER --password-stdin
      
      - name: Build docker images and publish to Dockehub
        run: |
          export VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && export VERSION=$VERSION
          [ "$VERSION" == "master" ] && export VERSION=snapshot

          echo VERSION=$VERSION
          docker-compose -f docker-compose.yml build web
          docker-compose -f docker-compose.yml push web

          # tag and push versions X.X and latest
          if echo "$VERSION" | grep -qE '^\w+\.\w+\.\w+$' && [ "$LATEST_TAG" == "$VERSION" ]; then
            for VERSION in $(echo $VERSION | cut -d. -f1,2)  latest; do
              export VERSION
              echo VERSION=$VERSION
              docker-compose -f docker-compose.yml build web
              docker-compose -f docker-compose.yml push web
            done
          fi
